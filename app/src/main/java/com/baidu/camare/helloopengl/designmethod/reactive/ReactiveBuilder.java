package com.baidu.camare.helloopengl.designmethod.reactive;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;public class ReactiveBuilder {   public static void main(String [] args){        ReactiveBuilder reactiveBuilder = new ReactiveBuilder();        reactiveBuilder.getMethod();        System.out.println(ReactiveBuilder.class);   }   public void getMethod(){       Class<?> mClass = null;//      HelloReactive data = new HelloReactive();//      Class clazz = data.getClass();//        Class clazz = HelloReactive.class;//        clazz.getName();//        System.out.println(clazz.getName().toString());// class的获取       try {           Class clazz  = Class.forName("com.baidu.camare.helloopengl.designmethod.reactive.HelloReactive");           Class clz = HelloReactive.Hello.class;           System.out.println(clazz.getName());           System.out.println(String[].class.getName());           System.out.println(int.class.getName());           System.out.println(" Inner Class name:"+clz.getName());           System.out.println(" Inner Class Canonical name:"+clz.getCanonicalName());           System.out.println(" Inner Class simple name:"+clz.getSimpleName());           System.out.println("Modifier(修饰符)"+clazz.getModifiers());           System.out.println("打印出一个类的所有修饰符 类名修饰符:"+ Modifier.toString(clz.getModifiers()));//           try {//               clazz.newInstance();//           } catch (InstantiationException e) {//               e.printStackTrace();//           } catch (IllegalAccessException e) {//               e.printStackTrace();//           }//           两者的区别就是 getDeclaredField() 获取的是 Class 中被 private 修饰的属性。//           getField() 方法获取的是非私有属性，并且 getField() 在当前 Class 获取不到时会向祖先类获取。           Field field = null;           Field field1 = null;           try {               // 获取自身的所有的public属性，包括从父类继承下来的          //     field = clazz.getField("var3");               // 获取自身所有的属性，但不包括从父类继承下来的属性               field1 =clazz.getDeclaredField("var3");           } catch (NoSuchFieldException e) {               e.printStackTrace();           }      //     System.out.println("获取class的成员 被private修饰的属性："+field1);// 域的获取           // 获取类的所有属性           Field[] fields = clazz.getFields();           for (Field field2:fields){               System.out.println("Fields--" +field2);           }           Field[] fields1 = clazz.getDeclaredFields();           for (Field field2:fields1){               System.out.println("DeclaredFields--" +field2);           }// 获取方法 Method           // 类似与Field  获取自身所有的public方法  包括继承父类           Method[] methods = clazz.getMethods();           for (Method method:methods){               System.out.println("Methods--" +method);           }           // 获取自身所有的方法  不包括继承的父类的方法           Method[] methods1 = clazz.getDeclaredMethods();           for (Method method : methods1){               System.out.println("DeclaredMethods--" +method);           }         //  System.out.println("Method--"+clazz.getMethod("messageNumber",null));// 获取Constructor  因为Cons不能从父类继承           Constructor[] constructor = clazz.getConstructors();           for (Constructor constructor1 : constructor){               System.out.println("Constructor--"+ constructor1);           }           Constructor[] constructors = clazz.getDeclaredConstructors();           for (Constructor constructor1 :constructors){               System.out.println("DeclaredConstructors--"+ constructor1);           }//Field的操控            Field[] f = clazz.getFields();           for (Field field2 :f){               System.out.println("Field :"+field2.getName());               System.out.println("Field type:"+field2.getType());               System.out.println("Field generic type:"+field2.getGenericType());               System.out.println("-------------------");           }//Field 内容的读取与赋值           Class cla = Class.forName("com.baidu.camare.helloopengl.designmethod.reactive.HelloReactive");           try {               Field a = cla.getField("getMassage");           } catch (NoSuchFieldException e) {               e.printStackTrace();           }       } catch (ClassNotFoundException e) {           e.printStackTrace();       }   }}